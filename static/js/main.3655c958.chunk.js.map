{"version":3,"sources":["components/home/home.js","layouts/defaultLayout.js","App.js","serviceWorker.js","index.js"],"names":["React","Component","Header","Layout","Sider","Content","SiderDemo","state","collapsed","toggle","_this","setState","react_default","a","createElement","layout","trigger","collapsible","this","className","menu","theme","mode","defaultSelectedKeys","Item","key","icon","type","style","background","padding","onClick","margin","minHeight","App","defaultLayout","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAC8BA,IAAMC,mCCE5BC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QAwDRC,6MArDbC,MAAQ,CACNC,WAAW,KAGbC,OAAS,WACPC,EAAKC,SAAS,CACZH,WAAYE,EAAKH,MAAMC,qFAKzB,OACEI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACV,EAAD,CAAOY,QAAS,KAAMC,aAAW,EAACT,UAAWU,KAAKX,MAAMC,WACtDI,EAAAC,EAAAC,cAAA,OAAKK,UAAU,SACfP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACrDX,EAAAC,EAAAC,cAACM,EAAA,EAAKI,KAAN,CAAWC,IAAI,KACbb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,SACXf,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAACM,EAAA,EAAKI,KAAN,CAAWC,IAAI,KACbb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,iBACXf,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAACM,EAAA,EAAKI,KAAN,CAAWC,IAAI,KACbb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAMC,KAAK,WACXf,EAAAC,EAAAC,cAAA,wBAINF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACZ,EAAD,CAAQ0B,MAAO,CAAEC,WAAY,OAAQC,QAAS,IAC5ClB,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEP,UAAU,UACVQ,KAAMT,KAAKX,MAAMC,UAAY,cAAgB,YAC7CuB,QAASb,KAAKT,UAGlBG,EAAAC,EAAAC,cAACT,EAAD,CACEuB,MAAO,CACLI,OAAQ,YACRF,QAAS,GACTD,WAAY,OACZI,UAAW,MALf,oBAvCcjC,IAAMC,WCQfiC,MARf,WACE,OAEItB,EAAAC,EAAAC,cAACqB,EAAD,OCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3655c958.chunk.js","sourcesContent":["import React from 'react';\r\nclass CustomTextInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.textInput = null;\r\n\r\n    this.setTextInputRef = element => {\r\n      this.textInput = element;\r\n    };\r\n\r\n    this.focusTextInput = () => {\r\n      // Focus the text input using the raw DOM API\r\n      if (this.textInput) this.textInput.focus();\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // autofocus the input on mount\r\n    this.focusTextInput();\r\n  }\r\n\r\n  render() {\r\n    // Use the `ref` callback to store a reference to the text input DOM\r\n    // element in an instance field (for example, this.textInput).\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          ref={this.setTextInputRef}\r\n        />\r\n        <input\r\n          type=\"button\"\r\n          value=\"Focus the text input\"\r\n          onClick={this.focusTextInput}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CustomTextInput;","import React from 'react';\r\nimport { Layout, Menu, Icon } from 'antd';\r\n\r\nconst { Header, Sider, Content } = Layout;\r\n\r\nclass SiderDemo extends React.Component {\r\n  state = {\r\n    collapsed: false,\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            <Menu.Item key=\"1\">\r\n              <Icon type=\"user\" />\r\n              <span>nav 1</span>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\">\r\n              <Icon type=\"video-camera\" />\r\n              <span>nav 2</span>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\">\r\n              <Icon type=\"upload\" />\r\n              <span>nav 3</span>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: '#fff', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 280,\r\n            }}\r\n          >\r\n            Content\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\nexport default SiderDemo;\r\n// ReactDOM.render(<SiderDemo />, mountNode);","import React from 'react';\nimport './App.css';\nimport Home from './components/home/home'\nimport DefaultLayout from './layouts/defaultLayout'\n\nfunction App() {\n  return (\n    // <div className=\"App\">\n      <DefaultLayout/>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}